name: Check versions

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - created

jobs:
  check-versions:
    name: Check-versions
    strategy:
      matrix:
        python-version: [3.11]
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: ‚öôÔ∏è Install Poetry
        uses: abatilo/actions-poetry@v2.3.0
        with:
          poetry-version: 1.5.1
      - name: ‚öôÔ∏è Install dependencies
        run: poetry install
      - name: üöÄ Check Manifest.json
        run: |
          pyproject_version=$(poetry version | awk '{print $2}')
          echo "pyproject.toml version: $pyproject_version"
          manifest_version=$(jq -r '.version' custom_components/qss/manifest.json)
          echo "manifest.json version: $manifest_version"
          if [[ "$pyproject_version" != "$manifest_version" ]]; then
            echo "Error: Version mismatch between pyproject.toml ($pyproject_version) and manifest.json ($manifest_version)"
            exit 1
          fi

          pyproject_dependencies=$(poetry show --only main | awk -F' ' '{print $1}')
          echo "pyproject.toml dependecies: $pyproject_dependencies"
          manifest_dependencies=$(jq -r '.requirements[]' custom_components/qss/manifest.json)
          echo "manifest.json dependecies: $manifest_dependencies"
          for dependency in $pyproject_dependencies; do
            matching_dependency=$(echo "$manifest_dependencies" | grep "$dependency")
            if [[ -z "$matching_dependency" ]]; then
              echo "Error: Missing dependency $dependency in manifest.json"
              exit 1
            fi
          done
